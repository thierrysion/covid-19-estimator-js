{"version":3,"sources":["estimator.js","app.js","index.js"],"names":["periodUnits","days","weeks","months","predictInfections","currentlyInfected","timeValue","timeUnit","Math","trunc","economyLossByRequestedTime","infectionsByRequestedTime","adip","adiiu","computeImpact","data","reportedCases","timeToElapse","periodType","dollarsInFlight","region","avgDailyIncomePopulation","avgDailyIncomeInUSD","computeSevereImpact","severeCasesByRequestedTime","hospitalBedsByRequestedTime","totalHospitalBeds","casesForICUByRequestedTime","casesForVentilatorsByRequestedTime","covid19ImpactEstimator","impact","severeImpact","App","Component","constructor","props","super","this","state","handleSubmit","bind","handlePopulationChange","handleReportedCasesChange","handleTotalHospitalBedsChange","handleTimeToElapseChange","handlePeriodTypeChange","event","setState","population","target","value","preventDefault","name","avgAge","previsions","estimator","estimations","rowspan","render","className","onSubmit","for","type","min","required","data-population","onChange","id","placeholder","reported-cases","total-hospital-beds","time-to-elapse","period-type","Object","entries","map","periodKey","periodValue","key","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.09971afb.chunk.js","sourcesContent":["const periodUnits = { days: 1, weeks: 7, months: 30 };\r\nconst progressionRatio = 3;\r\n\r\nfunction predictInfections(currentlyInfected, timeValue, timeUnit) {\r\n  const factor = Math.trunc((timeValue * timeUnit) / progressionRatio);\r\n  return currentlyInfected * 2 ** factor;\r\n}\r\n\r\nfunction economyLossByRequestedTime(infectionsByRequestedTime, timeValue, timeUnit, adip, adiiu) {\r\n  return Math.trunc(infectionsByRequestedTime * adip * adiiu * timeValue * timeUnit * 100) / 100;\r\n}\r\n\r\nfunction computeImpact(data) {\r\n  const currentlyInfected = data.reportedCases * 10;\r\n\r\n  const infectionsByRequestedTime = predictInfections(currentlyInfected, data.timeToElapse,\r\n    periodUnits[data.periodType]);\r\n\r\n  const dollarsInFlight = economyLossByRequestedTime(infectionsByRequestedTime, data.timeToElapse,\r\n    periodUnits[data.periodType], data.region.avgDailyIncomePopulation,\r\n    data.region.avgDailyIncomeInUSD);\r\n\r\n  return {\r\n    currentlyInfected,\r\n    infectionsByRequestedTime,\r\n    dollarsInFlight\r\n  };\r\n}\r\n\r\nfunction computeSevereImpact(data) {\r\n  const currentlyInfected = data.reportedCases * 50;\r\n\r\n  const infectionsByRequestedTime = predictInfections(currentlyInfected,\r\n    data.timeToElapse, periodUnits[data.periodType]);\r\n\r\n  const severeCasesByRequestedTime = Math.trunc(0.15 * infectionsByRequestedTime);\r\n\r\n  const availableHospitalBeds = Math.trunc(0.35 * data.totalHospitalBeds);\r\n  const hospitalBedsByRequestedTime = availableHospitalBeds - severeCasesByRequestedTime;\r\n\r\n  const casesForICUByRequestedTime = Math.trunc(0.05 * infectionsByRequestedTime);\r\n\r\n  const casesForVentilatorsByRequestedTime = Math.trunc(0.02 * infectionsByRequestedTime);\r\n\r\n  const dollarsInFlight = economyLossByRequestedTime(infectionsByRequestedTime, data.timeToElapse,\r\n    periodUnits[data.periodType], data.region.avgDailyIncomePopulation,\r\n    data.region.avgDailyIncomeInUSD);\r\n\r\n  return {\r\n    currentlyInfected,\r\n    infectionsByRequestedTime,\r\n    severeCasesByRequestedTime,\r\n    hospitalBedsByRequestedTime,\r\n    casesForICUByRequestedTime,\r\n    casesForVentilatorsByRequestedTime,\r\n    dollarsInFlight\r\n  };\r\n}\r\n\r\nexport const covid19ImpactEstimator = (data) => {\r\n  const input = data;\r\n  return {\r\n    data: input,\r\n    impact: computeImpact(data),\r\n    severeImpact: computeSevereImpact(data)\r\n  };\r\n};\r\n\r\nexport default covid19ImpactEstimator;\r\n","import React, { Component } from 'react';\r\n\r\nimport covid19ImpactEstimator, { covid19ImpactEstimator as estimator } from './estimator';\r\n\r\nimport './app.css';\r\n\r\nconst periodUnits = { days: 1, weeks: 7, months: 30 };\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      'population': '',\r\n      'timeToElapse': '',\r\n      'reportedCases': '',\r\n      'totalHospitalBeds': '',\r\n      'periodType': '',\r\n      'estimations': ''\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handlePopulationChange = this.handlePopulationChange.bind(this);\r\n    this.handleReportedCasesChange = this.handleReportedCasesChange.bind(this);\r\n    this.handleTotalHospitalBedsChange = this.handleTotalHospitalBedsChange.bind(this);\r\n    this.handleTimeToElapseChange = this.handleTimeToElapseChange.bind(this);\r\n    this.handlePeriodTypeChange = this.handlePeriodTypeChange.bind(this);\r\n  }\r\n  \r\n  handlePopulationChange(event) {\r\n    this.setState({population: event.target.value});\r\n  }\r\n  \r\n  handleReportedCasesChange(event) {\r\n    this.setState({reportedCases: event.target.value});\r\n  }\r\n  \r\n  handleTotalHospitalBedsChange(event) {\r\n    this.setState({totalHospitalBeds: event.target.value});\r\n  }\r\n  \r\n  handleTimeToElapseChange(event) {\r\n    this.setState({timeToElapse: event.target.value});\r\n  }\r\n  \r\n  handlePeriodTypeChange(event) {\r\n    this.setState({periodType: event.target.value});\r\n  }\r\n  \r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const data = {\r\n      region: {\r\n        name: \"Africa\",\r\n        avgAge: 19.7,\r\n        avgDailyIncomeInUSD: 5,\r\n        avgDailyIncomePopulation: 0.71\r\n      },\r\n      periodType: this.state.periodType,\r\n      timeToElapse: this.state.timeToElapse,\r\n      reportedCases: this.state.reportedCases,\r\n      population: this.state.population,\r\n      totalHospitalBeds: this.state.totalHospitalBeds\r\n    };\r\n    const previsions = estimator(data);\r\n    this.setState({estimations: (\r\n      <div>\r\n        <p><strong>Region's informations:</strong></p>\r\n        <ul>\r\n          <li>name <strong>\"Africa\"</strong></li>\r\n          <li>average age <strong>\"19.7\"</strong></li>\r\n          <li>average daily income in USD <strong>\"5\"</strong></li>\r\n          <li>average daily income population <strong>\"0.71\"</strong></li>\r\n          <li>population <strong>{this.state.population}</strong></li>\r\n          <li>reported cases <strong>{this.state.reportedCases}</strong></li>\r\n          <li>total hospital beds <strong>{this.state.totalHospitalBeds}</strong></li>\r\n          <li>time to elapse <strong>{this.state.timeToElapse}</strong></li>\r\n          <li>time to elapse <strong>{this.state.timeToElapse}</strong></li>\r\n          <li>period type <strong>{this.state.periodType}</strong></li>\r\n        </ul>\r\n        <div>\r\n          <p><strong>Predictions:</strong></p>\r\n          <table>\r\n            <tr>\r\n              <th rowspan={3}>Impact</th>\r\n              <td>currentlyInfected</td>\r\n              <td>{previsions.impact.currentlyInfected}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>infectionsByRequestedTime</td>\r\n              <td>{previsions.impact.infectionsByRequestedTime}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>dollarsInFlight</td>\r\n              <td>{previsions.impact.dollarsInFlight}</td>\r\n            </tr>\r\n            <tr>\r\n              <th rowspan={7}>Severe impact</th>\r\n              <td>currentlyInfected</td>\r\n              <td>{previsions.severeImpact.currentlyInfected}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>infectionsByRequestedTime</td>\r\n              <td>{previsions.severeImpact.infectionsByRequestedTime}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>severeCasesByRequestedTime</td>\r\n              <td>{previsions.severeImpact.severeCasesByRequestedTime}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>hospitalBedsByRequestedTime</td>\r\n              <td>{previsions.severeImpact.hospitalBedsByRequestedTime}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>casesForICUByRequestedTime</td>\r\n              <td>{previsions.severeImpact.casesForICUByRequestedTime}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>casesForVentilatorsByRequestedTime</td>\r\n              <td>{previsions.severeImpact.casesForVentilatorsByRequestedTime}</td>\r\n            </tr>\r\n            <tr>\r\n              <td>dollarsInFlight</td>\r\n              <td>{previsions.severeImpact.dollarsInFlight}</td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )});\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"div-form\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <fieldset>\r\n              <legend>Informations regarding the COVID-19 in your zone</legend>\r\n              <div>\r\n                <label for=\"in_pop\">population:</label>\r\n                <input type=\"number\" min=\"1\" required data-population={this.state.population} value={this.state.population} onChange={this.handlePopulationChange} id=\"in_pop\" placeholder=\"Enter the population number\" />\r\n              </div>\r\n              <div>\r\n                <label for=\"in_reported_cases\">Reported cases:</label>\r\n                <input type=\"number\" min=\"1\" required reported-cases={this.state.reportedCases} value={this.state.reportedCases} onChange={this.handleReportedCasesChange} id=\"in_reported_cases\" placeholder=\"Enter the current number of reported cases\" />\r\n              </div>\r\n              <div>\r\n                <label for=\"in_totalHospitalBeds\">Total hospital beds:</label>\r\n                <input type=\"number\" min=\"1\" required total-hospital-beds={this.state.totalHospitalBeds} value={this.state.totalHospitalBeds} onChange={this.handleTotalHospitalBedsChange} id=\"in_totalHospitalBeds\" placeholder=\"Enter the total number of hospital beds\" />\r\n              </div>\r\n              <div>\r\n                <label for=\"in_timeToElapse\">Time to elapse:</label>\r\n                <input type=\"number\" min=\"1\" required time-to-elapse={this.state.timeToElapse} value={this.state.timeToElapse} onChange={this.handleTimeToElapseChange} id=\"in_timeToElapse\" placeholder=\"Enter the time to elapse\" />\r\n              </div>\r\n              <div>\r\n                <label for=\"in_periodType\">Period type:</label>\r\n                <select period-type={this.state.periodType} value={this.state.periodType} onChange={this.handlePeriodTypeChange} id=\"in_periodType\">\r\n                  {Object.entries(periodUnits).map(([periodKey,periodValue]) => (\r\n                    <option key={periodKey} value={periodKey}>{periodKey}</option>\r\n                    )\r\n                  )}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <button type='submit'>Submit</button>\r\n              </div>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n        <div className=\"div-impact\">\r\n          <header>Estimation of the  impact</header>\r\n          {this.state.estimations}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './app'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}